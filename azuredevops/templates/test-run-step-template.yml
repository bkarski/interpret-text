parameters:
- name: testRunType
  type: string
  values:
  - Unit
  - Integration
- name: installationType
  type: string
- name: pythonVersion
  type: string
- name: pinRequirements
  type: boolean
  default: False
- name: envInfoArtifact
  type: string
- name: envInfoFileBase
  type: string
# Following are used if the installationType is PyPI
- name: pypiUrl
  type: string
- name: versionArtifactName
  type: string
- name: versionArtifactFile
  type: string
# Following used if the installationType is WheelArtifact
- name: wheelArtifactName
  type: string
- name: conda_env
  type: string
  default: interpret_conda_env
- name: conda_path
  type: string
  default: /usr/share/miniconda/bin

steps:
- template: conda-path-step-template.yml

- bash: brew install libomp
  displayName: Install OpenMP with Homebrew
  condition:  eq(variables['Agent.OS'], 'Darwin')

- bash: |
      python tools/generate_conda_files.py --name ${{parameters.conda_env}} --python-version ${{parameters.pythonVersion}}
      conda env create -n ${{parameters.conda_env}} --file=${{parameters.conda_env}}.yaml
  displayName: 'Creating Conda Environment with dependencies'

- bash: |
      source activate ${{parameters.conda_env}}
      python --version
  displayName: 'Verify Python version'

# Need to have alternatives to this install
- bash: |
      source activate ${{parameters.conda_env}}
      pip install -e python/
  displayName: 'Install locally with pip'
  
- bash: |
      source activate ${{parameters.conda_env}}
      pip install -r requirements.txt
  displayName: 'Install requirements'

- template: environment-info-step-template.yml
  parameters:
    conda_env: ${{parameters.conda_env}}
    envInfoArtifact: ${{parameters.envInfoArtifact}}
    envInfoFileBase: ${{parameters.envInfoFileBase}}

- ${{ if eq(parameters.testRunType, 'Unit')}}:
  - bash: |
        source activate ${{parameters.conda_env}}
        python -m pytest test/unit --junitxml=./TEST--TEST.xml -o junit_suite_name="$(Agent.JobName)-Unit"
    displayName: Run Unit tests

- ${{ if eq(parameters.testRunType, 'Integration')}}:
  # Also split up the integration tests :-(
  - bash: |
        source activate ${{parameters.conda_env}}
        python -m pytest test/integration/test_notebook_classical_explainer.py --junitxml=./TEST--TEST.xml -o junit_suite_name="$(Agent.JobName)-Integration"
    displayName: Classical explainer integration tests
    
  - bash: |
        source activate ${{parameters.conda_env}}
        python -m pytest test/integration/test_notebook_unified_information_explainer.py --junitxml=./TEST--TEST.xml -o junit_suite_name="$(Agent.JobName)-Integration"
    displayName: Unified information explainer integration tests

  - bash: |
        source activate ${{parameters.conda_env}}
        python -m pytest test/integration/test_notebook_introspective_rationale_explainer.py --junitxml=./TEST--TEST.xml -o junit_suite_name="$(Agent.JobName)-Integration"
    displayName: Introspective rationale explainer integration tests

  - bash: |
        source activate ${{parameters.conda_env}}
        python -m pytest test/integration/

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/*.xml'
    failTaskOnFailedTests: true
  condition: succeededOrFailed()
  displayName: 'Publish Test Results'

- bash: |
      source activate ${{parameters.conda_env}}
      python -m pip install flake8
      flake8 --ignore=E501,E266,W503,F403,F405,E731,F821,E203 ./python/
  displayName: 'Run flake8'